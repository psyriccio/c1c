Перем _ХМЛ;
Перем _КолОтст;
Перем _Сериализатор;

Функция _Отст()
	
	Стр = "";
	Для К = 1 По _КолОтст Цикл
		Стр = Стр + "  ";
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции

Процедура  _НчЭл(Имя)
	//Состояние(Имя);
	//	Сообщить(_Отст() + "<" + Имя);
	_КолОтст = _КолОтст + 1;
	_ХМЛ.ЗаписатьНачалоЭлемента(Имя);	
КонецПроцедуры

Процедура _КнЭл()
//	Сообщить(_Отст() + ">");
	_КолОтст = _КолОтст - 1;
	_ХМЛ.ЗаписатьКонецЭлемента();	
КонецПроцедуры

Функция _ПТ(Зн) 
	
	Если ТипЗнч(Зн) = Тип("ОбъектМетаданных") Тогда
		Возврат Зн.Имя;
	ИначеЕсли ТипЗнч(Зн) = Тип("Булево") Тогда
		Возврат ?(Зн, "true", "false");	
	ИначеЕсли ТипЗнч(Зн) = Тип("Число") Тогда
		Возврат Формат(Зн, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0");
	ИначеЕсли ТипЗнч(Зн) = Тип("ОписаниеТипов") Тогда
		Возврат Зн;
	ИначеЕсли ТипЗнч(Зн) = Тип("ЧастиДаты") Тогда
		Возврат ?(Зн = ЧастиДаты.Время, "Time", ?(Зн = ЧастиДаты.Дата, "Date", "DateTime"));
	КонецЕсли;
	
	Возврат Строка(Зн);
	
КонецФункции

Процедура _Атр(Имя, Зн)
	Попытка
//		Сообщить(_Отст() + "@" + Имя + ":" + _ПТ(Зн));
		_ХМЛ.ЗаписатьАтрибут(Имя, _ПТ(Зн));
	Исключение
		Сообщить("!!! Ошибка записи атрибута: " + Строка(Имя) + "@" + Строка(ТипЗнч(Зн)) + ":" + Строка(Зн));	
		Сообщить(ОписаниеОшибки());	
		ВызватьИсключение "!";	
	КонецПопытки;
КонецПроцедуры // ()

Процедура _ЭлСер(Имя, Зн)
КонецПроцедуры

Процедура _АтрСер(Имя, Зн)
	Попытка
//		Сообщить(_Отст() + "@" + Имя + ":" + "//XDTO: "+ Строка(Зн) + "//");
		_ХМЛ.ЗаписатьНачалоАтрибута(Имя);
		_Сериализатор.ЗаписатьXML(_ХМЛ, Зн, НазначениеТипаXML.Неявное, ФормаXML.Атрибут);
		_ХМЛ.ЗаписатьКонецАтрибута();
	Исключение
		Сообщить("!!! Ошибка записи атрибута: " + Строка(Имя) + "@" + Строка(ТипЗнч(Зн)) + ":" + Строка(Зн));	
		Сообщить(ОписаниеОшибки());	
		ВызватьИсключение "!";
	КонецПопытки;
КонецПроцедуры

Процедура _ТЗ(ТЗ)
	Для Каждого Стр Из ТЗ Цикл
		_НчЭл("subgr");
		Для Каждого Кол Из ТЗ.Колонки Цикл
			_НчЭл("subval");
			МассивИмен = Новый Массив;
			Имя = Кол.Имя;
			Пока МассивИмен.Найти(Имя) <> Неопределено Цикл
				Имя = Имя + "_";
			КонецЦикла;
			МассивИмен.Добавить(Имя);
			_Атр("name", Имя);
			Зн = Стр[ТЗ.Колонки.Индекс(Кол)];
			Если ТипЗнч(Зн) = Тип("ТаблицаЗначений") Тогда
				_ТЗ(Зн);
			Иначе	
				_Атр("value", Зн);
			КонецЕсли;
			_КнЭл(); // subval
		КонецЦикла;
	_КнЭл(); // subgr
	КонецЦикла;
КонецПроцедуры

Процедура _БД(МетМассив)
	ТабБД = ПолучитьСтруктуруХраненияБазыДанных(МетМассив, Истина); 
	Таб1С = ПолучитьСтруктуруХраненияБазыДанных(МетМассив, Ложь);
	Общ = МетМассив.Количество() * 2;
	Кол_ = 0;
	Для Каждого ММ Из МетМассив Цикл
		Ф = Новый ЗаписьXML;
		Имя = СтрЗаменить(ММ.ПолноеИмя(), ".", ПолучитьРазделительПути());
		ЧастиИмен = СтрСплит(Имя, ПолучитьРазделительПути());
		Каталог = "";
		Для К = 0 По ЧастиИмен.Количество()-2 Цикл
			Каталог = Каталог + ПолучитьРазделительПути() + ЧастиИмен[К];	
		КонецЦикла;
		//УдалитьФайлы(ИмяКаталога + "\\c1vals\\" + Имя + ".xml");
		СоздатьКаталог(ИмяКаталога + "\\c1vals\\" + Каталог);
		Ф.ОткрытьФайл(ИмяКаталога + "\\c1vals\\" + Имя + ".xml", "UTF-8");
		Ф.ЗаписатьОбъявлениеXML();
		_ХМЛ = Ф;
		Состояние(ИмяКаталога + "\\c1vals\\" + Имя + ".xml");
		_НчЭл("c1vals");
		ОбработкаПрерыванияПользователя();
		Попытка		
			Состояние(Строка(Окр(Кол_/Общ*100)));
		Исключение КонецПопытки;
		Кол_ = Кол_ + 1;
		_НчЭл("Object");
		_Атр("Name", ММ.ПолноеИмя());
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", ММ.ПолноеИмя());
		Стрк1С = Таб1С.НайтиСтроки(Отбор);
		Для Каждого Стр Из Стрк1С Цикл
			ОбработкаПрерыванияПользователя();
			_НчЭл("c1gr");
			Для Каждого Кол Из Таб1С.Колонки Цикл
				ОбработкаПрерыванияПользователя();
				_НчЭл("c1val");
				МассивИмен = Новый Массив;
				Имя = Кол.Имя;
				Пока МассивИмен.Найти(Имя) <> Неопределено Цикл
					Имя = Имя + "_";
				КонецЦикла;
				МассивИмен.Добавить(Имя);
				_Атр("name", Имя);
				Зн = Стр[Таб1С.Колонки.Индекс(Кол)];
				Если ТипЗнч(Зн) = Тип("ТаблицаЗначений") Тогда
					_ТЗ(Зн);
				Иначе
					_Атр("value", Зн);
				КонецЕсли;
				_КнЭл(); // c1val
			КонецЦикла;
			_КнЭл(); // c1gr
		КонецЦикла;
		_КнЭл(); // c1vals
		Ф.Закрыть();
	КонецЦикла;
	Для Каждого ММ Из МетМассив Цикл
		Имя = СтрЗаменить(ММ.ПолноеИмя(), ".", ПолучитьРазделительПути());
		ЧастиИмен = СтрСплит(Имя, ПолучитьРазделительПути());
		Каталог = "";
		Для К = 0 По ЧастиИмен.Количество()-2 Цикл
			Каталог = Каталог + ПолучитьРазделительПути() + ЧастиИмен[К];	
		КонецЦикла;
		Ф = Новый ЗаписьXML;
		//УдалитьФайлы(ИмяКаталога + "\\dbcvals\\" + Имя + ".xml");
		СоздатьКаталог(ИмяКаталога + "\\dbcvals\\" + Каталог);
		Ф.ОткрытьФайл(ИмяКаталога + "\\dbcvals\\" + Имя + ".xml", "UTF-8");
		Ф.ЗаписатьОбъявлениеXML();
		_ХМЛ = Ф;
		_НчЭл("dbcvals");
		Состояние(ИмяКаталога + "\\dbcvals\\" + Имя + ".xml");
		ОбработкаПрерыванияПользователя();
		Попытка		
			Состояние(Строка(Окр(Кол_/Общ*100)));
		Исключение КонецПопытки;
		Кол_ = Кол_ + 1;
		_НчЭл("Object");
		_Атр("Name", ММ.ПолноеИмя());
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", ММ.ПолноеИмя());
		СтркБД = ТабБД.НайтиСтроки(Отбор);
		Для Каждого Стр Из СтркБД Цикл
			ОбработкаПрерыванияПользователя();
			_НчЭл("dbcgr");
			Для Каждого Кол Из ТабБД.Колонки Цикл
				ОбработкаПрерыванияПользователя();
				_НчЭл("dbcval");
				МассивИмен = Новый Массив;
				Имя = Кол.Имя;
				Пока МассивИмен.Найти(Имя) <> Неопределено Цикл
					Имя = Имя + "_";
				КонецЦикла;
				МассивИмен.Добавить(Имя);
				_Атр("name", Имя);
				Зн = Стр[ТабБД.Колонки.Индекс(Кол)];
				Если ТипЗнч(Зн) = Тип("ТаблицаЗначений") Тогда
					_ТЗ(Зн);
				Иначе
					_Атр("value", Зн);
				КонецЕсли;
				_КнЭл(); // dbcval
			КонецЦикла;
			_КнЭл(); // dbcgr
		КонецЦикла;
		_КнЭл(); // Object
		_КнЭл(); // dbcvals
		Ф.Закрыть();
	КонецЦикла;
КонецПроцедуры

Процедура _Тип(ЗнТип)
	_НчЭл("TypeDescription");
	Если ЗнТип.СодержитТип(Тип("Число")) Тогда
		_Атр("QNotNegative", (ЗнТип.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный));
		_Атр("QDigits", ЗнТип.КвалификаторыЧисла.Разрядность);
		_Атр("QPrecission", ЗнТип.КвалификаторыЧисла.РазрядностьДробнойЧасти);
	КонецЕсли;
	Если ЗнТип.СодержитТип(Тип("Строка")) Тогда
		_Атр("QLength", ЗнТип.КвалификаторыСтроки.Длина);
		_Атр("QLengthVariable", (ЗнТип.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная));  
	КонецЕсли;
	Если ЗнТип.СодержитТип(Тип("ДвоичныеДанные")) Тогда
		_Атр("QLength", ЗнТип.КвалификаторыСтроки.Длина);
		_Атр("QLengthVariable", (ЗнТип.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная));  
	КонецЕсли;
	Если ЗнТип.СодержитТип(Тип("Дата")) Тогда
		_Атр("QDate", ЗнТип.КвалификаторыДаты.ЧастиДаты);
	КонецЕсли;	
	Для Каждого Тп Из ЗнТип.Типы() Цикл
		_НчЭл("Type");
		Попытка
			_Атр("Name", Метаданные.НайтиПоТипу(Тп).ПолноеИмя());
		Исключение
			_Атр("Name", Строка(Тп));
		КонецПопытки;
		_КнЭл(); // Type
	КонецЦикла;
	_КнЭл(); // Types 
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Ф = Новый ЗаписьXML;
	//УдалитьФайлы(ИмяКаталога + "\\" + Метаданные.Имя + ".xml");
	Ф.ОткрытьФайл(ИмяКаталога + "\\" + Метаданные.Имя + ".xml", "UTF-8");
	Ф.ЗаписатьОбъявлениеXML();
	
	_ММ = Новый Массив;
	
	_ХМЛ = Ф;
	_КолОтст = 0;
	
	_НчЭл("Conf");
	_Атр("Name", Метаданные.Имя);
	_Атр("EnumsCount", Метаданные.Перечисления.Количество());
	_Атр("CatalogsCount", Метаданные.Справочники.Количество());
	_Атр("DocumentsCount", Метаданные.Документы.Количество());
	//_НчЭл("Catalogs");
	
	_ММ.Добавить(Метаданные);
	
	
	Для Каждого МетПер Из Метаданные.Перечисления Цикл
		_ММ.Добавить(МетПер);
		_НчЭл("Enum");
		_Атр("Name", МетПер.Имя); 
		_Атр("FullName", МетПер.ПолноеИмя()); 
		_Атр("Description", МетПер.Представление()); 
		_Атр("ListDescription", МетПер.ПредставлениеСписка); 
		_Атр("Synonym", МетПер.Синоним);
		
		Для Каждого МетРекв Из МетПер.ЗначенияПеречисления Цикл
			_ММ.Добавить(МетРекв);
			_НчЭл("Value");
			_Атр("Name", МетРекв.Имя);
			_Атр("FullName", МетРекв.ПолноеИмя()); 
			_Атр("Description", МетРекв.Представление()); 
			_Атр("Synonym", МетРекв.Синоним);
			_КнЭл(); //Value
		КонецЦикла;
		
		_КнЭл();// Enum
	КонецЦикла;
                                  
	//_КнЭл(); // Catalogs
	
	Для Каждого МетСпр Из Метаданные.Справочники Цикл
		_ММ.Добавить(МетСпр);
		_НчЭл("Catalog");
		_Атр("Name", МетСпр.Имя); 
		_Атр("FullName", МетСпр.ПолноеИмя()); 
		_Атр("Description", МетСпр.Представление()); 
		_Атр("ObjectDescription", МетСпр.ПредставлениеОбъекта); 
		_Атр("ListDescription", МетСпр.ПредставлениеСписка); 
		_Атр("Synonym", МетСпр.Синоним);
		_Атр("CodeLength", МетСпр.ДлинаКода);
		_Атр("DescriptionLength", МетСпр.ДлинаНаименования);
		_Атр("Hierarchical", МетСпр.Иерархический);
		_Атр("LevelCount", МетСпр.КоличествоУровней);
		_Атр("CodeType", МетСпр.ТипКода);
		
		//_НчЭл("Properties");
		Для Каждого МетРекв Из МетСпр.Реквизиты Цикл
			_ММ.Добавить(МетРекв);
			_НчЭл("Property");
			_Атр("Name", МетРекв.Имя);
			_Атр("FullName", МетРекв.ПолноеИмя()); 
			_Атр("Description", МетРекв.Представление()); 
			_Атр("Synonym", МетРекв.Синоним);
			_Тип(МетРекв.Тип);
			_КнЭл(); //Property
		КонецЦикла;
		//_КнЭл(); // Properties
		
		//_НчЭл("TabularSections");
		Для Каждого МетТЧ Из МетСпр.ТабличныеЧасти Цикл
			_ММ.Добавить(МетТЧ);
			_НчЭл("TabularSection");
			_Атр("Name", МетТЧ.Имя);
			_Атр("FullName", МетТЧ.ПолноеИмя()); 
			_Атр("Description", МетТЧ.Представление()); 
			_Атр("Synonym", МетТЧ.Синоним);
			//_НчЭл("Properties");
			Для Каждого РеквТЧ Из МетТЧ.Реквизиты Цикл
				_ММ.Добавить(РеквТЧ);
				_НчЭл("Property");
				_Атр("Name", РеквТЧ.Имя);
				_Атр("FullName", РеквТЧ.ПолноеИмя()); 
				_Атр("Description", РеквТЧ.Представление()); 
				_Атр("Synonym", РеквТЧ.Синоним);
				_Тип(РеквТЧ.Тип);
				_КнЭл(); // Property
			КонецЦикла;
			//_КнЭл(); // Properties
			_КнЭл(); // TabularSection
		КонецЦикла;
		//_КнЭл(); // TabularSections
		
		_КнЭл();// Catalog
	КонецЦикла;
                                  
	//_КнЭл(); // Catalogs
	
	//_НчЭл("Documents");
	
	Для Каждого МетДок Из Метаданные.Документы Цикл
		_ММ.Добавить(МетДок);
		_НчЭл("Document");
		_Атр("Name", МетДок.Имя); 
		_Атр("FullName", МетДок.ПолноеИмя()); 
		_Атр("Description", МетДок.Представление()); 
		_Атр("ObjectDescription", МетДок.ПредставлениеОбъекта); 
		_Атр("ListDescription", МетДок.ПредставлениеСписка); 
		_Атр("Synonym", МетДок.Синоним);
		_Атр("CodeLength", МетДок.ДлинаНомера);
		_Атр("CodeType", МетДок.ТипНомера);
		
		//_НчЭл("Properties");
		Для Каждого МетРекв Из МетДок.Реквизиты Цикл
			_ММ.Добавить(МетРекв);
			_НчЭл("Property");
			_Атр("Name", МетРекв.Имя);
			_Атр("FullName", МетРекв.ПолноеИмя()); 
			_Атр("Description", МетРекв.Представление()); 
			_Атр("Synonym", МетРекв.Синоним);
			_Тип(МетРекв.Тип);
			_КнЭл(); // Property
		КонецЦикла;
		//_КнЭл(); // Properties
		
		//_НчЭл("TabularSections");
		Для Каждого МетТЧ Из МетДок.ТабличныеЧасти Цикл
			_ММ.Добавить(МетТЧ);
			_НчЭл("TabularSection");
			_Атр("Name", МетТЧ.Имя);
			_Атр("FullName", МетТЧ.ПолноеИмя()); 
			_Атр("Description", МетТЧ.Представление()); 
			_Атр("Synonym", МетТЧ.Синоним);
			//_НчЭл("Properties");
			Для Каждого РеквТЧ Из МетТЧ.Реквизиты Цикл
				_ММ.Добавить(РеквТЧ);
				_НчЭл("Property");
				_Атр("Name", РеквТЧ.Имя);
				_Атр("FullName", РеквТЧ.ПолноеИмя()); 
				_Атр("Synonym", РеквТЧ.Синоним);
				_Атр("Description", РеквТЧ.Представление()); 
				_Тип(РеквТЧ.Тип);
				_КнЭл(); // Property
			КонецЦикла;
			//_КнЭл(); // Properties
			_КнЭл(); // TabularSection
		КонецЦикла;
		//_КнЭл(); // TabularSections
		
		_КнЭл();// Document
	КонецЦикла;
                                  
	//_КнЭл(); // Documents
	//_НчЭл("DataBaseStructure");	
	//_КнЭл();// DataBaseStructure
	_КнЭл(); // Conf
	Ф.Закрыть();
 	_БД(_ММ);
	
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	ИмяКаталога = Диалог.Каталог;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ИмяКаталога = "E:\c1schema\test";
	URI = "http://v8.1c.ru/8.1/data/enterprise/current-config";
КонецПроцедуры

Функция СтрСплит(Стр, Разд) Экспорт
	
	Рез = Новый Массив;
	Ост = Стр;
	Пока Ост <> "" Цикл
		ПР = Найти(Ост, Разд);         
		Если ПР = 0 Тогда
			Рез.Добавить(Ост);
			Ост = "";
		Иначе
			Нк = Лев(Ост, ПР-1);
			Рез.Добавить(Нк);
			Ост = Прав(Ост, СтрДлина(Ост) - (ПР + СтрДлина(Разд) - 1));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Процедура ОсновныеДействияФормыЭкспортСхемы(Кнопка)
	СоздатьКаталог(ИмяКаталога);
	Схемы = ФабрикаXDTO.ЭкспортСхемыXML(URI);
	Зап = Новый ЗаписьDOM;
	Для Каждого Сх Из Схемы Цикл
		Имя = Сх.ПространствоИмен;
		Части = СтрСплит(Имя, "/");
		Имя = Части[Части.Количество()-1];
		Ф = Новый ЗаписьXML;
		Ф.ОткрытьФайл(ИмяКаталога + Имя + ".xsd", "UTF-8");
		//Ф.ЗаписатьОбъявлениеXML();
		//Ф.ЗаписатьНачалоЭлемента("schemes");
		//Ф.ЗаписатьНачалоЭлемента(Имя);
		Сх.ОбновитьЭлементDOM();
		Зап.Записать(Сх.ДокументDOM, Ф);
		Ф.Закрыть();
		//Ф.ЗаписатьКонецЭлемента(); // conf
	КонецЦикла;
КонецПроцедуры

Процедура ОсновныеДействияФормыПоказатьПакеты(Кнопка)
	Для Каждого Пак Из ФабрикаXDTO.Пакеты Цикл
		Сообщить(Пак.URIПространстваИмен);
		Для Каждого Доч Из Пак Цикл
			Сообщить(Символы.Таб + Доч.Имя);	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

